Given a 32-bit signed integer, reverse digits of an integer.给定一个32位有符号整数，整数的反转数字。

Example 1:
Input: 123    Output:  321

Example 2:  
Input: -123     Output: -321

Example 3:
Input: 120    Output: 21
Note:
Assume we are dealing with an environment which could only hold integers within the 32-bit signed integer range. 
For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

假设我们正在处理一个只能保存32位有符号整数范围内的整数的环境。出于此问题的目的，假设您的函数在反转整数溢出时返回0。
反转整数溢出，值多大的数？


###将数字转换为字符串，然后将字符串逆序输出，在转换为数值，即实现了反转
def reverse(self, x):
    s = cmp(x, 0)   #cmp 实现取出正负号
    r = int(`s*x`[::-1])    ##注意这里不是单引号，而是左上角第二个键
    return s*r * (r < 2**31)### 括号内实现了判断数字溢出



for (int i = length; i > 0; i-- ){
            res = res * 10 + abs_x % 10;
            abs_x = abs_x / 10;
        }
