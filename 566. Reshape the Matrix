给出一个由二维数组表示的矩阵，两个正整数r和c分别代表所需的整形矩阵的行号和列号。

重构后的矩阵需要以原始矩阵的所有元素按照相同的行遍数顺序填充。如果给定参数的“重塑”操作可能合法，则输出新的重塑矩阵; 否则，输出原始矩阵。

示例1：输入：nums =[[1,2]，[3,4]]   r = 1，c = 4

输出：[[1,2,3,4]]

说明：nums的行遍历为[ 1,2,3,4]。新的重塑矩阵是一个1 * 4矩阵，使用前面的列表逐行填充它。

示例2：输入：nums =[[1,2]，[3,4]]  r = 2，c = 4
输出：[[1,2]，[3,4]]

说明：无法重新整形2 * 2矩阵到2 * 4矩阵。所以输出原始矩阵。

最开始对于矩阵的行列不太清楚，去查了，python的矩阵方法

这个里面，关于数组的表示需要关注，[num for row in nums for num in row]展成一列。最开始一直编译不过，

def matrixReshape(nums,r,c):
    if len(nums)*len(nums[0])!=r*c:
        return nums
    else:
        newMatrix = [[0 for j in xrange(c)] for i in xrange(r)]  ##矩阵的读法
        temp=[num for row in nums for num in row]
        for i in xrange(r): 
                for j in xrange(c):  
                    newMatrix[i][j]=temp[i*c+j]
        return newMatrix
 ##主要看怎么处理矩阵       
        ans = [[]]
        for i in range(len(nums)):
            for j in range(len(nums[0])):
                k = nums[i][j]
                if len(ans[-1]) < c:     #首先将行取满
                    ans[-1].append(k)
                else:
                    ans.append([k])    #怎么换行呢？直接append一个列表
        return ans        
            
##2 oneliner    
def matrixReshape(self, nums, r, c):
    return nums if len(sum(nums, [])) != r * c else map(list, zip(*([iter(sum(nums, []))]*c)))
    
def matrixReshape(self, nums, r, c):
    flat = sum(nums, [])
    if len(flat) != r * c:
        return nums
    tuples = zip(*([iter(flat)] * c))
    return map(list, tuples)
    
#Solution 3 - itertools
def matrixReshape(self, nums, r, c):
    if r * c != len(nums) * len(nums[0]):
        return nums
    it = itertools.chain(*nums)
    return [list(itertools.islice(it, c)) for _ in xrange(r)]


# 4
import numpy as np

class Solution(object):
    def matrixReshape(self, nums, r, c):
        try:
            return np.reshape(nums, (r, c)).tolist()
        except:
            return nums
