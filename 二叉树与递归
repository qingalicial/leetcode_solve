二叉树相关操作
前序遍历
class Tree(object):
      def __init__(self,data,left,right):
        self.data=data
         self.left=left
         self.right=right
 def post_visit(Tree):
     if Tree:
         post_visit(Tree.left)
16         post_visit(Tree.right)
17         print Tree.data
18 def pre_visit(Tree):
19     if Tree:
20         print Tree.data
21         pre_visit(Tree.left)
22         pre_visit(Tree.right)
23 def in_visit(Tree):
24     if Tree:
25         in_visit(Tree.left)
26         print Tree.data
27         in_visit(Tree.right)



104:求二叉树的最大深度
class Solution(object):
    def maxDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        return 1+max(self.maxDepth(root.left),self.maxDepth(root.right))
111:求二叉树的最小深度
此时递归结束条件就有陷阱，结束的条件时，叶子节点，
class Solution(object):
    def minDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        if not root.left or not root.right:
            return 1+max(self.minDepth(root.left),self.minDepth(root.right))
        return 1+min(self.minDepth(root.left),self.minDepth(root.right))
        
# DFS
def minDepth1(self, root):
    if not root:
        return 0
    if None in [root.left, root.right]:
        return max(self.minDepth(root.left), self.minDepth(root.right)) + 1
    else:
        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1
 
# BFS   
def minDepth(self, root):
    if not root:
        return 0
    queue = collections.deque([(root, 1)])
    while queue:
        node, level = queue.popleft()
        if node:
            if not node.left and not node.right:
                return level
            else:
                queue.append((node.left, level+1))
                queue.append((node.right, level+1))
