你正在爬楼梯，需要n步才能爬到顶
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.
Example 1:
Input: 2    Output:  2
Explanation:  There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:
Input: 3      Output:  3
Explanation:  There are three ways to climb to the top.

1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Basically it's a fibonacci.
##构造fibonacci数列
def climbStairs(self, n):
    a, b = 1, 1
    for i in range(n):
        a, b = b, a + b
    return a
    
    
##这个也是往fibonacci数列上靠，只是没有理清思路，绕了curr进来，所求就是fibonacci，则可简化为第一种方案
class Solution(object):
    def climbStairs(self, n):
        if n <= 2:
            return n
            
        first, second, curr = 1, 2, 0
        
        for step in range(2, n):
            curr = first + second
            first, second = second, curr
        
        return curr
 

    
    
    
##递归思想，总归还是一个fibonacci数列，只是是否了解本质的区别    
# Top down - TLE
def climbStairs1(self, n):
    if n == 1:   ##可以简化为  if n<=2:return n,虽然简洁，不过都是后续想明白了的优化，哈哈
        return 1
    if n == 2:
        return 2
    return self.climbStairs(n-1)+self.climbStairs(n-2)###关于递归调用，需要加self.!!!!!
 
 
##后续没有再看，觉得上述方法比较好
# Bottom up, O(n) space
def climbStairs2(self, n):
    if n == 1:
        return 1
    res = [0 for i in xrange(n)]
    res[0], res[1] = 1, 2
    for i in xrange(2, n):
        res[i] = res[i-1] + res[i-2]
    return res[-1]

# Bottom up, constant space
def climbStairs3(self, n):
    if n == 1:
        return 1
    a, b = 1, 2
    for i in xrange(2, n):
        tmp = b
        b = a+b
        a = tmp
    return b
    
# Top down + memorization (list)
def climbStairs4(self, n):
    if n == 1:
        return 1
    dic = [-1 for i in xrange(n)]
    dic[0], dic[1] = 1, 2
    return self.helper(n-1, dic)
    
def helper(self, n, dic):
    if dic[n] < 0:
        dic[n] = self.helper(n-1, dic)+self.helper(n-2, dic)
    return dic[n]
    
# Top down + memorization (dictionary)  
def __init__(self):
    self.dic = {1:1, 2:2}
    
def climbStairs(self, n):
    if n not in self.dic:
        self.dic[n] = self.climbStairs(n-1) + self.climbStairs(n-2)
    return self.dic[n]
