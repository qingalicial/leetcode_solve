175. Combine Two Tables
Write a SQL query for a report that provides the following information foreach person in the Person table, 
regardless if there is an address for each of those people:
忽略address是否存在

INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。  
LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。
RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。

select  from where   =    相当于inner join

SELECT FirstName, LastName, City, State FROM Person LEFT JOIN Address ON Person.PersonId = Address.PersonId 





176. Second Highest Salary
For example, given the above Employee table, the query should return 200 as the second highest salary. 
If there is no second highest salary, then the query should return null.

查询employee中中第二高的薪水，如果没有，则返回null
select max(Salary) as SecondHighestSalary from Employee where Salary<(select max(Salary) from Employee )


177. Nth Highest Salary
For example, given the above Employee table, the nth highest salary where n = 2 is 200.
If there is no nth highest salary, then the query should return null.
查询第n高的薪水，如果没有，返回null

CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
set N=N-1;
  RETURN (
      # Write your MySQL query statement below.
      select distinct Salary from Employee order by Salary desc limit N,1

  );
END

set N=N-1  return中只能是N，不能N-1   

在MYSQL官方文档中描述limit是在结果集中返回你需要的数据，它可以尽快的返回需要的行而不用管剩下的行，
limit n,m  则代表返回n开始的m行，ORACLE 12C以前也有分页方式但是相对比较麻烦
还有，limit 0 则返回最大值，limit 1 返回第二大



178. Rank Scores   
编写一个SQL查询来评分。如果两个分数之间有联系，则两个分数应该相同。请注意，在平局之后，下一个排名数应该是下一个连续的整数值。
换句话说，行列之间不应该有“漏洞”。
这个比较难
+-------+------+
| Score | Rank |
+-------+------+
| 4.00  | 1    |
| 4.00  | 1    |
| 3.85  | 2    |
| 3.65  | 3    |
| 3.65  | 3    |
| 3.50  | 4    |
+-------+------+

Always Count: 1322 ms

This one counts, for each score, the number of distinct greater or equal scores.

SELECT Score,  (SELECT count(distinct Score) FROM Scores WHERE Score >= s.Score) Rank
FROM Scores s
ORDER BY Score desc

一定要加distinct，不然第一个就是从2开始了
Always Count, Pre-uniqued: 795 ms
Same as the previous one, but faster because I have a subquery that “uniquifies” the scores first. Not entirely sure why it’s faster,
I’m guessing MySQL makes tmp a temporary table and uses it for every outer Score.

SELECT Score,  (SELECT count(*) FROM (SELECT distinct Score s FROM Scores) tmp WHERE s >= Score) Rank
FROM Scores
ORDER BY Score desc
