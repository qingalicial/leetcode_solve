count-and-say序列
1
2. 11
3. 21
4. 1211
5. 111221

“Count and Say problem” Write a code to do following:

n String to print
0 1
1 1 1
2 2 1
3 1 2 1 1
…
Base case: n = 0 print "1"
for n = 1, look at previous string and write number of times a digit is seen and the digit itself. In this case,

digit 1 is seen 1 time in a row… so print “1 1”

for n = 2, digit 1 is seen two times in a row, so print “2 1”

for n = 3, digit 2 is seen 1 time and then digit 1 is seen 1 so print “1 2 1 1”

for n = 4 you will print “1 1 1 2 2 1”


给定一个整数n，生成count-and-say序列的第n项。

注意：整数序列的每一项都将以字符串形式表示。

例1：
输入： 1    输出： “1”

例2：
输入： 4    输出： “1211”

初步看，没有看懂题目

###1  
def countAndSay(self, n):
        s = '1'
        for _ in range(n-1):
            let, temp, count = s[0], '', 0
            for l in s:
                if let == l:
                    count += 1
                else:
                    temp += str(count)+let
                    let = l
                    count = 1
            temp += str(count)+let
            s = temp
        return s
        
####2
def countAndSay(self, n):
        if n == 2: return '11' 
        s = '1'
        for i in range(1,n):
            s = self.count(s)##自己定义函数后，调用方法
        return s

    def count(self,string):
        newstr = ''
        count,start = 0,string[0]
        for i in range(len(string)):
            if string[i] == start:
                count += 1
                if i == len(string)-1:
                    newstr += (str(count) + string[i-1])
            else: 
                newstr += (str(count) + string[i-1])
                start = string[i]
                count = 1
                if i == len(string)-1:
                    newstr += (str(count) + string[i])
        return newstr

###3
class Solution:
def countAndSay(self, n):
    say = '1'
    for i in xrange(n - 1):
        next = ''
        for item in [list(g) for k, g in itertools.groupby(say)]:
            next += str(len(item)) + str(item[0])
        say = next
    return say

Solution 1 … using a regular expression

def countAndSay(self, n):
    s = '1'
    for _ in range(n - 1):
        s = re.sub(r'(.)\1*', lambda m: str(len(m.group(0))) + m.group(1), s)
    return s
Solution 2 … using a regular expression

def countAndSay(self, n):
    s = '1'
    for _ in range(n - 1):
        s = ''.join(str(len(group)) + digit
                    for group, digit in re.findall(r'((.)\2*)', s))
    return s
Solution 3 … using groupby

def countAndSay(self, n):
    s = '1'
    for _ in range(n - 1):
        s = ''.join(str(len(list(group))) + digit
                    for digit, group in itertools.groupby(s))
    return s
