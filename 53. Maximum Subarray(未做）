在一个数组中找到连续的子数组（至少包含一个数字），这个数组的总和最大。

例如，给定数组[-2,1,-3,4,-1,2,1,-5,4]，
连续的子数组[4,-1,2,1]具有最大的sum = 6。

一维动态规划。二分法的基本思想是：从中间分开，两边分别递归，同时处理跨界的情况。

def maxSubArray(self, A):
    current = 0
    result = A[0]
    for i in A:
        current += i
        result = max(current,result)
        current = max(0,current)
    return result
    
    def maxSubArray(self, nums):
      for i in xrange(1,len(nums)):nums[i]=max(nums[i], nums[i]+nums[i-1])
      return max(nums)
      
class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        max_sub,fn = nums[0],0
        for i in nums:
            fn = max([i,fn+i])
            max_sub = max(max_sub,fn)
        return max_sub  
        
 class Solution:
    # @param A, a list of integers
    # @return an integer
    # 6:57
    def maxSubArray(self, A):
        if not A:
            return 0

        curSum = maxSum = A[0]
        for num in A[1:]:
            curSum = max(num, curSum + num)
            maxSum = max(maxSum, curSum)

        return maxSum
