Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
给定一个字符串，只包含以下字符，判断输入字符是否合法

The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.
括号次序必须合法，如

38ms
初步想法，但是无法实现"([)]" 的判断，应该考虑用栈
 if ("(" in s and ")" in s) or ("[" in s and "]" in s) or ("{" in s and "}" in s):
            return True
        else:
            return False
 
 ##此方法为讨论中最初的方法
 class Solution:
    # @return a boolean
    def isValid(self, s):
        stack = []
        dict = {"]":"[", "}":"{", ")":"("}
        for char in s:
            if char in dict.values():
                stack.append(char)
            elif char in dict.keys():
                if stack == [] or dict[char] != stack.pop():
                    return False
            else:
                return False
        return stack == []
 ##改进的栈方法，确定入栈出栈的条件，巧用if和else，容易判断的用if
 def isValid(self, s):
    map = {')':'(', '}':'{', ']':'['}
    st = []
    for e in s:
        if st and (e in map and st[-1] == map[e]):
            st.pop()
        else:
            st.append(e)
    return not st
 
 ##栈
 def isValid(self, s):
        stack = []
        dic = {'(': ')', '{':'}', '[':']'}
        for c in s:
            if c in dic:
                stack.append(c)
            else:
                if not stack or dic[stack.pop()] != c:
                    return False
        return not stack
 
 
 
 ##replace是重新生成一个字符串，所以空间消耗很大
 
 def isValid(self, s):
    delta = len(s)
    while(delta != 0 and delta%2 == 0):
        s = s.replace("()", "")
        s = s.replace("[]", "")
        s = s.replace("{}", "")
        # breaks while loop if string was not altered during current pass
        delta = len(s) if delta > len(s) else 0
    return len(s) == 0
 
            
 def isValid(self, s):
            stack=[]
            for i in s:
                if i in ['(','[','{']:
                    stack.append(i)
                else:
                    if not stack or {')':'(',']':'[','}':'{'}[i]!=stack[-1]:
                        return False
                    stack.pop()
            return not stack
            
            
 ##一个特别的解法           
def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        n = len(s)
        if n == 0:
            return True
        
        if n % 2 != 0:
            return False
            
        while '()' in s or '{}' in s or '[]' in s:
            s = s.replace('{}','').replace('()','').replace('[]','')
        
        if s == '':
            return True
        else:
            return False
