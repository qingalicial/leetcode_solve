给定一个整数数组，其中1≤a[i]≤n（n =数组的大小），一些元素出现两次，其他出现一次。

找出不包含在这个数组中的所有[1，n]元素。

你能做到没有额外的空间和O（N）运行时？你可能会认为返回的列表不算多余的空间。

例：

输入：

[4,3,2,7,8,2,3,1]

输出：

[5,6]
##1 直接遍历，若不存在则存入列表
算例无法通过，超时[15989,914,15758,2840,11076,8864]
def findDisappearedNumbers(self, nums):
        return list(i for i in range(1,len(nums) + 1) if i not in nums) 
        
##set,集合，无序不重复      32ms  
         return list(set(range(1, len(nums)+1)) - set(nums))
 
 
 ##abs绝对值，将nums列表中的数添加负号，输出正数
        nums = [0] + nums
        for i in range(len(nums)):
            index = abs(nums[i])
            nums[index] = -abs(nums[index])
        
        return [i for i in range(len(nums)) if nums[i] > 0]
